{"ast":null,"code":"var _jsxFileName = \"E:\\\\MyProjects\\\\FormikTask\\\\tax-form\\\\src\\\\TaxForm.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import { Formik, Form, Field, FieldArray } from 'formik';\n\n// const initialValues = {\n//   applicable_items: [],\n//   applied_to: 'some',\n//   name: '',\n//   rate: 0,\n//   categories: [\n//     {\n//       name: 'Category A',\n//       items: [\n//         { id: 14867, label: 'Item 1' },\n//         { id: 14869, label: 'Item 2' }\n//       ]\n//     },\n//     {\n//       name: 'Category B',\n//       items: [\n//         { id: 14870, label: 'Item 3' }\n//       ]\n//     },\n//     {\n//       name: 'Uncategorized',\n//       items: [\n//         { id: 14872, label: 'Item 4' },\n//         { id: 14873, label: 'Item 5' },\n//         { id: 14865, label: 'Item 6' }\n//       ]\n//     }\n//   ]\n// };\n\n// const TaxForm = () => {\n//   const handleSubmit = (values) => {\n//     console.log(values);\n//   };\n\n//   return (\n//     <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n//       {({ values, setFieldValue }) => (\n//         <Form>\n//           <div>\n//             <label htmlFor=\"applied_to\">Apply to items</label>\n//             <Field as=\"select\" id=\"applied_to\" name=\"applied_to\"\n//               onChange={(e) => {\n//                 const value = e.target.value;\n//                 setFieldValue(\"applied_to\", value);\n//                 if (value === 'all') {\n//                   const allItems = values.categories\n//                     .reduce((acc, category) => [...acc, ...category.items], [])\n//                     .map(item => item.id);\n//                   setFieldValue('applicable_items', allItems);\n//                 } else {\n//                   setFieldValue('applicable_items', []);\n//                 }\n//               }}\n//             >\n//               <option value=\"some\">Some</option>\n//               <option value=\"all\">All</option>\n//             </Field>\n//           </div>\n\n//           {values.applied_to === 'some' && (\n//             <FieldArray name=\"applicable_items\">\n//               {({ push, remove }) => (\n//                 <>\n//                   {values.categories.map((category, idx) => (\n//                     <div key={idx}>\n//                       <label>\n//                         <Field\n//                           type=\"checkbox\"\n//                           name=\"category\"\n//                           onChange={(e) => {\n//                             const isChecked = e.target.checked;\n//                             category.items.forEach(item => {\n//                               if (isChecked) {\n//                                 if (!values.applicable_items.includes(item.id)) {\n//                                   push(item.id);\n//                                 }\n//                               } else {\n//                                 const index = values.applicable_items.indexOf(item.id);\n//                                 if (index !== -1) {\n//                                   remove(index);\n//                                 }\n//                               }\n//                             });\n//                           }}\n//                         />\n//                         {category.name}\n//                       </label>\n\n//                       <div style={{ paddingLeft: '20px' }}>\n//                         {category.items.map((item) => (\n//                           <div key={item.id}>\n//                             <label>\n//                               <Field\n//                                 type=\"checkbox\"\n//                                 name=\"applicable_items\"\n//                                 value={item.id}\n//                                 checked={values.applicable_items.includes(item.id)}\n//                                 onChange={(e) => {\n//                                   if (e.target.checked) {\n//                                     push(item.id);\n//                                   } else {\n//                                     const index = values.applicable_items.indexOf(item.id);\n//                                     if (index !== -1) {\n//                                       remove(index);\n//                                     }\n//                                   }\n//                                 }}\n//                               />\n//                               {item.label}\n//                             </label>\n//                           </div>\n//                         ))}\n//                       </div>\n//                     </div>\n//                   ))}\n//                 </>\n//               )}\n//             </FieldArray>\n//           )}\n\n//           <div>\n//             <label htmlFor=\"name\">Name</label>\n//             <Field id=\"name\" name=\"name\" />\n//           </div>\n//           <div>\n//             <label htmlFor=\"rate\">Rate</label>\n//             <Field id=\"rate\" name=\"rate\" type=\"number\" step=\"0.01\" />\n//           </div>\n\n//           <button type=\"submit\">Submit</button>\n//         </Form>\n//       )}\n//     </Formik>\n//   );\n// };\n\n// export default TaxForm;\n\n// import React from \"react\";\n// import { Formik, Field, Form } from \"formik\";\n// import * as Yup from \"yup\";\n\n// const categories = [\n//   {\n//     id: 1,\n//     name: \"Bracelets\",\n//     items: [\n//       { id: 14867, name: \"Jasinthe Bracelet\" },\n//       { id: 14869, name: \"Jasinthe Bracelet\" },\n//       { id: 14870, name: \"Inspire Bracelet\" },\n//     ],\n//   },\n//   {\n//     id: 2,\n//     name: \"Zero amount item with questions\",\n//     items: [{ id: 14872, name: \"Zero amount item with questions\" }],\n//   },\n//   {\n//     id: 3,\n//     name: \"Normal item with questions\",\n//     items: [{ id: 14873, name: \"Normal item with questions\" }],\n//   },\n//   { id: 4, name: \"Normal item\", items: [{ id: 14865, name: \"normal item\" }] },\n// ];\n// // Initial values setup\n// const initialValues = {\n//   name: \"\",\n//   rate: \"\",\n//   applied_to: \"some\",\n//   applicable_items: [],\n// };\n// // Validation schema\n// const validationSchema = Yup.object().shape({\n//   name: Yup.string().required(\"Required\"),\n//   rate: Yup.number().required(\"Required\"),\n//   applied_to: Yup.string().required(\"Required\"),\n//   applicable_items: Yup.array().when(\"applied_to\", {\n//     is: \"some\",\n//     then: Yup.array().min(1, \"Select at least one item\"),\n//   }),\n// });\n// const handleSubmit = (values) => {\n//   const data = {\n//     ...values,\n//     rate: values.rate / 100,\n//     applicable_items:\n//       values.applied_to === \"all\"\n//         ? categories\n//             .flatMap((category) => category.items)\n//             .map((item) => item.id)\n//         : values.applicable_items,\n//   };\n//   console.log(data);\n// };\n\nimport React from \"react\";\nimport { Formik, Field, Form } from \"formik\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst itemCategories = [{\n  name: \"Bracelets\",\n  items: [{\n    id: 1,\n    name: \"Jasinthe Bracelet\"\n  }, {\n    id: 2,\n    name: \"Jasinthe Bracelet\"\n  }, {\n    id: 3,\n    name: \"Inspire Bracelet\"\n  }]\n}, {\n  name: \"\",\n  items: [{\n    id: 4,\n    name: \"Zero amount item with questions\"\n  }, {\n    id: 5,\n    name: \"Normal item with questions\"\n  }, {\n    id: 6,\n    name: \"normal item\"\n  }]\n}];\nconst initialValues = {\n  taxName: \"\",\n  taxRate: \"\",\n  applyTo: \"specific\",\n  selectedItems: []\n};\nfunction TaxForm() {\n  _s();\n  const [selectedItems, setSelectedItems] = useState([]);\n  const handleSubmit = values => {\n    const applicableItems = values.applyTo === \"all\" ? itemCategories.flatMap(category => category.items.map(item => item.id)) : values.selectedItems;\n    const appliedTo = values.applyTo;\n    console.log({\n      applicable_items: applicableItems,\n      applied_to: appliedTo,\n      name: values.taxName,\n      rate: parseFloat(values.taxRate) / 100\n    });\n  };\n  const handleCategorySelect = (category, isSelected) => {\n    let updatedItems;\n    if (isSelected) {\n      updatedItems = [...selectedItems, ...category.items.map(item => item.id)];\n    } else {\n      updatedItems = selectedItems.filter(id => !category.items.some(item => item.id === id));\n    }\n    setSelectedItems(updatedItems);\n  };\n  const handleItemSelect = (itemId, isSelected) => {\n    const updatedItems = isSelected ? [...selectedItems, itemId] : selectedItems.filter(id => id !== itemId);\n    setSelectedItems(updatedItems);\n  };\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    children: ({\n      values,\n      setFieldValue\n    }) => /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"taxName\",\n          children: \"Tax Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          type: \"text\",\n          name: \"taxName\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"taxRate\",\n          children: \"Tax Rate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          type: \"number\",\n          name: \"taxRate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            type: \"radio\",\n            name: \"applyTo\",\n            value: \"all\",\n            onClick: () => setSelectedItems(itemCategories.flatMap(category => category.items.map(item => item.id)))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 15\n          }, this), \"Apply to all items in collection\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            type: \"radio\",\n            name: \"applyTo\",\n            value: \"specific\",\n            onClick: () => setSelectedItems([])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }, this), \"Apply to specific items\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this), values.applyTo === \"specific\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search Items\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 15\n        }, this), itemCategories.map((category, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: category.name ? {\n            backgroundColor: \"#f0f0f0\"\n          } : {},\n          children: [category.name && /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              type: \"checkbox\",\n              onChange: e => handleCategorySelect(category, e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 23\n            }, this), category.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: category.items.map(item => /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                type: \"checkbox\",\n                name: \"selectedItems\",\n                value: item.id,\n                onChange: e => handleItemSelect(item.id, e.target.checked)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 25\n              }, this), item.name]\n            }, item.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: [\"Apply tax to \", selectedItems.length, \" item(s)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n}\n_s(TaxForm, \"tcTDBxdHCoS/ruNL27SUc7saNmM=\");\n_c = TaxForm;\nexport default TaxForm;\nvar _c;\n$RefreshReg$(_c, \"TaxForm\");","map":{"version":3,"names":["React","Formik","Field","Form","useState","jsxDEV","_jsxDEV","itemCategories","name","items","id","initialValues","taxName","taxRate","applyTo","selectedItems","TaxForm","_s","setSelectedItems","handleSubmit","values","applicableItems","flatMap","category","map","item","appliedTo","console","log","applicable_items","applied_to","rate","parseFloat","handleCategorySelect","isSelected","updatedItems","filter","some","handleItemSelect","itemId","onSubmit","children","setFieldValue","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onClick","placeholder","index","style","backgroundColor","onChange","e","target","checked","length","_c","$RefreshReg$"],"sources":["E:/MyProjects/FormikTask/tax-form/src/TaxForm.js"],"sourcesContent":["// import React from 'react';\r\n// import { Formik, Form, Field, FieldArray } from 'formik';\r\n\r\n// const initialValues = {\r\n//   applicable_items: [],\r\n//   applied_to: 'some',\r\n//   name: '',\r\n//   rate: 0,\r\n//   categories: [\r\n//     {\r\n//       name: 'Category A',\r\n//       items: [\r\n//         { id: 14867, label: 'Item 1' },\r\n//         { id: 14869, label: 'Item 2' }\r\n//       ]\r\n//     },\r\n//     {\r\n//       name: 'Category B',\r\n//       items: [\r\n//         { id: 14870, label: 'Item 3' }\r\n//       ]\r\n//     },\r\n//     {\r\n//       name: 'Uncategorized',\r\n//       items: [\r\n//         { id: 14872, label: 'Item 4' },\r\n//         { id: 14873, label: 'Item 5' },\r\n//         { id: 14865, label: 'Item 6' }\r\n//       ]\r\n//     }\r\n//   ]\r\n// };\r\n\r\n// const TaxForm = () => {\r\n//   const handleSubmit = (values) => {\r\n//     console.log(values);\r\n//   };\r\n\r\n//   return (\r\n//     <Formik initialValues={initialValues} onSubmit={handleSubmit}>\r\n//       {({ values, setFieldValue }) => (\r\n//         <Form>\r\n//           <div>\r\n//             <label htmlFor=\"applied_to\">Apply to items</label>\r\n//             <Field as=\"select\" id=\"applied_to\" name=\"applied_to\"\r\n//               onChange={(e) => {\r\n//                 const value = e.target.value;\r\n//                 setFieldValue(\"applied_to\", value);\r\n//                 if (value === 'all') {\r\n//                   const allItems = values.categories\r\n//                     .reduce((acc, category) => [...acc, ...category.items], [])\r\n//                     .map(item => item.id);\r\n//                   setFieldValue('applicable_items', allItems);\r\n//                 } else {\r\n//                   setFieldValue('applicable_items', []);\r\n//                 }\r\n//               }}\r\n//             >\r\n//               <option value=\"some\">Some</option>\r\n//               <option value=\"all\">All</option>\r\n//             </Field>\r\n//           </div>\r\n\r\n//           {values.applied_to === 'some' && (\r\n//             <FieldArray name=\"applicable_items\">\r\n//               {({ push, remove }) => (\r\n//                 <>\r\n//                   {values.categories.map((category, idx) => (\r\n//                     <div key={idx}>\r\n//                       <label>\r\n//                         <Field\r\n//                           type=\"checkbox\"\r\n//                           name=\"category\"\r\n//                           onChange={(e) => {\r\n//                             const isChecked = e.target.checked;\r\n//                             category.items.forEach(item => {\r\n//                               if (isChecked) {\r\n//                                 if (!values.applicable_items.includes(item.id)) {\r\n//                                   push(item.id);\r\n//                                 }\r\n//                               } else {\r\n//                                 const index = values.applicable_items.indexOf(item.id);\r\n//                                 if (index !== -1) {\r\n//                                   remove(index);\r\n//                                 }\r\n//                               }\r\n//                             });\r\n//                           }}\r\n//                         />\r\n//                         {category.name}\r\n//                       </label>\r\n\r\n//                       <div style={{ paddingLeft: '20px' }}>\r\n//                         {category.items.map((item) => (\r\n//                           <div key={item.id}>\r\n//                             <label>\r\n//                               <Field\r\n//                                 type=\"checkbox\"\r\n//                                 name=\"applicable_items\"\r\n//                                 value={item.id}\r\n//                                 checked={values.applicable_items.includes(item.id)}\r\n//                                 onChange={(e) => {\r\n//                                   if (e.target.checked) {\r\n//                                     push(item.id);\r\n//                                   } else {\r\n//                                     const index = values.applicable_items.indexOf(item.id);\r\n//                                     if (index !== -1) {\r\n//                                       remove(index);\r\n//                                     }\r\n//                                   }\r\n//                                 }}\r\n//                               />\r\n//                               {item.label}\r\n//                             </label>\r\n//                           </div>\r\n//                         ))}\r\n//                       </div>\r\n//                     </div>\r\n//                   ))}\r\n//                 </>\r\n//               )}\r\n//             </FieldArray>\r\n//           )}\r\n\r\n//           <div>\r\n//             <label htmlFor=\"name\">Name</label>\r\n//             <Field id=\"name\" name=\"name\" />\r\n//           </div>\r\n//           <div>\r\n//             <label htmlFor=\"rate\">Rate</label>\r\n//             <Field id=\"rate\" name=\"rate\" type=\"number\" step=\"0.01\" />\r\n//           </div>\r\n\r\n//           <button type=\"submit\">Submit</button>\r\n//         </Form>\r\n//       )}\r\n//     </Formik>\r\n//   );\r\n// };\r\n\r\n// export default TaxForm;\r\n\r\n// import React from \"react\";\r\n// import { Formik, Field, Form } from \"formik\";\r\n// import * as Yup from \"yup\";\r\n\r\n// const categories = [\r\n//   {\r\n//     id: 1,\r\n//     name: \"Bracelets\",\r\n//     items: [\r\n//       { id: 14867, name: \"Jasinthe Bracelet\" },\r\n//       { id: 14869, name: \"Jasinthe Bracelet\" },\r\n//       { id: 14870, name: \"Inspire Bracelet\" },\r\n//     ],\r\n//   },\r\n//   {\r\n//     id: 2,\r\n//     name: \"Zero amount item with questions\",\r\n//     items: [{ id: 14872, name: \"Zero amount item with questions\" }],\r\n//   },\r\n//   {\r\n//     id: 3,\r\n//     name: \"Normal item with questions\",\r\n//     items: [{ id: 14873, name: \"Normal item with questions\" }],\r\n//   },\r\n//   { id: 4, name: \"Normal item\", items: [{ id: 14865, name: \"normal item\" }] },\r\n// ];\r\n// // Initial values setup\r\n// const initialValues = {\r\n//   name: \"\",\r\n//   rate: \"\",\r\n//   applied_to: \"some\",\r\n//   applicable_items: [],\r\n// };\r\n// // Validation schema\r\n// const validationSchema = Yup.object().shape({\r\n//   name: Yup.string().required(\"Required\"),\r\n//   rate: Yup.number().required(\"Required\"),\r\n//   applied_to: Yup.string().required(\"Required\"),\r\n//   applicable_items: Yup.array().when(\"applied_to\", {\r\n//     is: \"some\",\r\n//     then: Yup.array().min(1, \"Select at least one item\"),\r\n//   }),\r\n// });\r\n// const handleSubmit = (values) => {\r\n//   const data = {\r\n//     ...values,\r\n//     rate: values.rate / 100,\r\n//     applicable_items:\r\n//       values.applied_to === \"all\"\r\n//         ? categories\r\n//             .flatMap((category) => category.items)\r\n//             .map((item) => item.id)\r\n//         : values.applicable_items,\r\n//   };\r\n//   console.log(data);\r\n// };\r\n\r\nimport React from \"react\";\r\nimport { Formik, Field, Form } from \"formik\";\r\nimport { useState } from \"react\";\r\n\r\nconst itemCategories = [\r\n  {\r\n    name: \"Bracelets\",\r\n    items: [\r\n      { id: 1, name: \"Jasinthe Bracelet\" },\r\n      { id: 2, name: \"Jasinthe Bracelet\" },\r\n      { id: 3, name: \"Inspire Bracelet\" },\r\n    ],\r\n  },\r\n  {\r\n    name: \"\",\r\n    items: [\r\n      { id: 4, name: \"Zero amount item with questions\" },\r\n      { id: 5, name: \"Normal item with questions\" },\r\n      { id: 6, name: \"normal item\" },\r\n    ],\r\n  },\r\n];\r\n\r\nconst initialValues = {\r\n  taxName: \"\",\r\n  taxRate: \"\",\r\n  applyTo: \"specific\",\r\n  selectedItems: [],\r\n};\r\n\r\nfunction TaxForm() {\r\n  const [selectedItems, setSelectedItems] = useState([]);\r\n  const handleSubmit = (values) => {\r\n    const applicableItems =\r\n      values.applyTo === \"all\"\r\n        ? itemCategories.flatMap((category) =>\r\n            category.items.map((item) => item.id)\r\n          )\r\n        : values.selectedItems;\r\n\r\n    const appliedTo = values.applyTo;\r\n\r\n    console.log({\r\n      applicable_items: applicableItems,\r\n      applied_to: appliedTo,\r\n      name: values.taxName,\r\n      rate: parseFloat(values.taxRate) / 100,\r\n    });\r\n  };\r\n\r\n  const handleCategorySelect = (category, isSelected) => {\r\n    let updatedItems;\r\n    if (isSelected) {\r\n      updatedItems = [\r\n        ...selectedItems,\r\n        ...category.items.map((item) => item.id),\r\n      ];\r\n    } else {\r\n      updatedItems = selectedItems.filter(\r\n        (id) => !category.items.some((item) => item.id === id)\r\n      );\r\n    }\r\n    setSelectedItems(updatedItems);\r\n  };\r\n  const handleItemSelect = (itemId, isSelected) => {\r\n    const updatedItems = isSelected\r\n      ? [...selectedItems, itemId]\r\n      : selectedItems.filter((id) => id !== itemId);\r\n    setSelectedItems(updatedItems);\r\n  };\r\n\r\n  return (\r\n    <Formik initialValues={initialValues} onSubmit={handleSubmit}>\r\n      {({ values, setFieldValue }) => (\r\n        <Form>\r\n          <div>\r\n            <label htmlFor=\"taxName\">Tax Name</label>\r\n            <Field type=\"text\" name=\"taxName\" />\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"taxRate\">Tax Rate</label>\r\n            <Field type=\"number\" name=\"taxRate\" />\r\n          </div>\r\n\r\n          <div>\r\n            <label>\r\n              <Field\r\n                type=\"radio\"\r\n                name=\"applyTo\"\r\n                value=\"all\"\r\n                onClick={() =>\r\n                  setSelectedItems(\r\n                    itemCategories.flatMap((category) =>\r\n                      category.items.map((item) => item.id)\r\n                    )\r\n                  )\r\n                }\r\n              />\r\n              Apply to all items in collection\r\n            </label>\r\n\r\n            <label>\r\n              <Field\r\n                type=\"radio\"\r\n                name=\"applyTo\"\r\n                value=\"specific\"\r\n                onClick={() => setSelectedItems([])}\r\n              />\r\n              Apply to specific items\r\n            </label>\r\n          </div>\r\n\r\n          {values.applyTo === \"specific\" && (\r\n            <div>\r\n              <input type=\"text\" placeholder=\"Search Items\" />\r\n              {itemCategories.map((category, index) => (\r\n                <div\r\n                  key={index}\r\n                  style={category.name ? { backgroundColor: \"#f0f0f0\" } : {}}\r\n                >\r\n                  {category.name && (\r\n                    <label>\r\n                      <Field\r\n                        type=\"checkbox\"\r\n                        onChange={(e) =>\r\n                          handleCategorySelect(category, e.target.checked)\r\n                        }\r\n                      />\r\n\r\n                      {category.name}\r\n                    </label>\r\n                  )}\r\n\r\n                  <div>\r\n                    {category.items.map((item) => (\r\n                      <label key={item.id}>\r\n                        <Field\r\n                          type=\"checkbox\"\r\n                          name=\"selectedItems\"\r\n                          value={item.id}\r\n                          onChange={(e) =>\r\n                            handleItemSelect(item.id, e.target.checked)\r\n                          }\r\n                        />\r\n                        {item.name}\r\n                      </label>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n\r\n          <button type=\"submit\">\r\n            Apply tax to {selectedItems.length} item(s)\r\n          </button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\nexport default TaxForm;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}